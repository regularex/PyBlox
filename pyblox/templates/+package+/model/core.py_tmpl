import os
import logging


from hashlib import sha1
from datetime import datetime

from sqlalchemy import ForeignKey, Column, asc
from sqlalchemy.types import Integer, DateTime, Boolean, Unicode, UnicodeText
from sqlalchemy.orm import relation, synonym, relationship, backref

from ${package}.model import BaseDatabase
from mapping import user_groups, group_permissions

log = logging.getLogger(__name__)


class Group(BaseDatabase):
    '''Groups for Users

    '''
    __tablename__ = 'groups'

    id = Column(Integer, autoincrement=True, primary_key=True)
    name = Column(Unicode(64), unique=True, nullable=False)
    description = Column(UnicodeText)
    created_date = Column(DateTime, default=datetime.now())

    permissions = relationship('Permission', secondary=group_permissions, backref='groups')

    @property
    def permissions(self):
        perms = []
        for perm in self.permissions:
            perms.append(perm.name)
        return perms

    def __init__(self, name, description=None, date=None):
        self.name = name
        self.description = description or name
        self.created_date = datetime.now()

    def __str__(self):
        return self.name


class Permission(BaseDatabase):
    '''Permissions for groups

    '''
    __tablename__='permissions'

    id = Column(Integer, autoincrement=True, primary_key=True)
    name = Column(Unicode(32), default=u'Unknown')
    description = Column(Unicode(255), default=u'Unknown')

    groups = relationship('Group', secondary=group_permissions, backref='permissions')

    def __init__(self, name, description=None):
        self.name = name
        self.description = description or name

    def __repr__(self):
        return '{0}'.format(self.name)

    def __str__(self):
        return self.name


class User(BaseDatabase):
    '''User model

    '''
    __tablename__='users'

    id = Column(Integer, autoincrement=True, primary_key=True)
    username = Column(Unicode(128), unique=True, nullable=False)
    company_id = Column(Integer, ForeignKey('companies.id', onupdate='CASCADE', ondelete='CASCADE'))
    contact_id = Column(Integer, ForeignKey('contacts.id', onupdate='CASCADE', ondelete='CASCADE'))
    settings = Column(UnicodeText, default=unicode(dumps({'login_url': '/#/dashboard'})))
    created = Column(DateTime, default=datetime.now())
    active = Column(Boolean, default=True)

    user_contacts = relationship('Contact', secondary='user_contacts', backref='users')
    groups = relationship(Group, secondary='user_groups', backref='users')

    _hashword = Column(Unicode(255), nullable=False)

    @property
    def contact(self):
        return Contact.query.get(self.contact_id)

    @property
    def company(self):
        return Company.query.get(self.company_id)

    @classmethod
    def by_id(cls, id):
        return cls.query.get(id)

    @classmethod
    def by_company_id(cls, id):
        return cls.query.filter_by(company_id=id).order_by(asc(User.id)).all()

    @classmethod
    def by_username(cls, username):
        return cls.query.filter_by(username=username, active=True).first()

    @property
    def company(self):
        return Company.query.get(self.company_id)

    @property
    def company_name(self):
        return str(Company.query.get(self.company_id))

    @property
    def full_name(self):
        me = Contact.query.get(self.contact_id)
        if me.first_name or me.last_name:
            return str(me.first_name) + ' ' + str(me.last_name)
        return self.username

    @property
    def permissions(self):
        permissions = []
        for group in self.groups:
            for permission in group.permissions:
                permissions.append(str(permission))
        return ', '.join(permissions)

    def add_groups(self, groups):
        try:
            assert type(groups) == list, 'Groups needs to be a list.'
            # XXX: Fix hack.
            for group in self.groups:
                self.groups.remove(group)

            for group in Group.query.filter(Group.name.in_(groups)).all():
                self.groups.append(group)

        except Exception as e:
            log.error('Excepted: {0}'.format(e))
            pass

    def _set_password(self, password):
        hashed_password = password

        if isinstance(password, unicode):
            password_8bit = password.encode('UTF-8')
        else:
            password_8bit = password

        salt = sha1()
        salt.update(os.urandom(60))
        hash = sha1()
        hash.update(password_8bit + salt.hexdigest())
        hashed_password = salt.hexdigest() + hash.hexdigest()

        if not isinstance(hashed_password, unicode):
            hashed_password = hashed_password.decode('UTF-8')

        self._hashword = hashed_password

    def _get_password(self):
        return self._hashword

    password = property(_get_password, _set_password, 'The user login password.')

    def check_password(self, password):
        hashed_pass = sha1()
        hashed_pass.update(password + self._hashword[:40])
        return self._hashword[40:] == hashed_pass.hexdigest()

    def __repr__(self):
        return '<User({0},{1},{2},{3},{4},{5},{6})>'.format(
            self.id, self.username, self.company_id, self.first_name, self.last_name, self.created, self.active)


class CompanyTypes(BaseDatabase):
    __tablename__= 'company_types'

    id = Column(Integer, autoincrement=True, primary_key=True)
    name = Column(Unicode(128), nullable=False)
    description = Column(UnicodeText)
    created_date = Column(DateTime, default=datetime.now())


class Company(BaseDatabase):
    '''Company

    '''
    __tablename__= 'companies'

    id = Column(Integer, autoincrement=True, primary_key=True)
    parent_id = Column(Integer, ForeignKey('companies.id', onupdate='CASCADE', ondelete='CASCADE'))
    company_type_id = Column(Integer, ForeignKey('company_types.id', onupdate='CASCADE', ondelete='CASCADE'))
    name = Column(Unicode(128), nullable=False)
    settings = Column(UnicodeText)

    address = Column(Unicode(64), nullable=True)
    address_2 = Column(Unicode(64), nullable=True)
    city = Column(Unicode(64), nullable=True)
    state = Column(Unicode(32))
    postal_code = Column(Unicode(15))

    start_date = Column(DateTime, default=datetime.date(datetime.now()))
    end_date = Column(DateTime, nullable=True)
    last_login = Column(DateTime, default=datetime.date(datetime.now()))
    domain = Column(Unicode(255), nullable=True)
    hostname = Column(Unicode(255), nullable=True)
    logo_file_name = Column(Unicode(255), nullable=True)
    url = Column(Unicode(255), nullable=True)
    facebook_url = Column(Unicode(255), nullable=True)
    twiter_url = Column(Unicode(255), nullable=True)
    linkedin_url = Column(Unicode(255), nullable=True)
    description = Column(UnicodeText, nullable=True)

    primary_telephone = Column(Unicode(15), nullable=True)
    primary_extension = Column(Unicode(8), nullable=True)
    secondary_telephone = Column(Unicode(15), nullable=True)
    secondary_extension = Column(Unicode(8), nullable=True)

    administrative_email = Column(Unicode(128), nullable=True)
    billing_email = Column(Unicode(128), nullable=True)
    technical_email = Column(Unicode(128), nullable=True)

    active = Column(Boolean, default=True)

    users = relationship('User', backref='companies')
    contacts = relationship('Contact', backref='companies')
    shipping_addresses = relationship('Address', secondary='company_shipping_addresses', backref='companies')

    def __repr__(self):
        return '<Customer({0},{1},{2},{3},{4},{5},{6}>'.format(
            self.id, self.name, self.start_date, self.end_date, self.last_login, self.url, self.active)

    def __str__(self):
        return self.name


class Address(BaseDatabase):
    '''Addresses

    '''
    __tablename__='addresses'

    id = Column(Integer, autoincrement=True, primary_key=True)
    address_type_id = Column(Integer, default=1)
    name = Column(Unicode(128), nullable=False)
    address = Column(Unicode(64), nullable=True)
    address_2 = Column(Unicode(64), nullable=True)
    city = Column(Unicode(64), nullable=True)
    state = Column(Unicode(32))
    postal_code = Column(Unicode(15))


class Contact(BaseDatabase):
    __tablename__='contacts'

    id = Column(Integer, autoincrement=True, primary_key=True)
    contact_type_id = Column(Integer, default=1)
    company_id = Column(Integer, ForeignKey('companies.id', onupdate='CASCADE', ondelete='CASCADE'))
    first_name = Column(Unicode(128), nullable=False)
    last_name = Column(Unicode(128), nullable=False)

    primary_telephone = Column(Unicode(15), nullable=True)
    primary_extension = Column(Unicode(8), nullable=True)
    secondary_telephone = Column(Unicode(15), nullable=True)
    secondary_extension = Column(Unicode(8), nullable=True)

    primary_email = Column(Unicode(128), nullable=True)
    secondary_email = Column(Unicode(128), nullable=True)

    address = Column(Unicode(64), nullable=True)
    address_2 = Column(Unicode(64), nullable=True)
    city = Column(Unicode(64), nullable=True)
    state = Column(Unicode(32))
    postal_code = Column(Unicode(15))

    shipping_addresses = relationship('Address', secondary='contact_shipping_addresses', backref='contacts')





